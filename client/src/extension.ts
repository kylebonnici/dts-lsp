/*
 * Copyright 2024 Kyle Micallef Bonnici
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as path from "path";
import * as vscode from "vscode";

import {
  LanguageClient,
  LanguageClientOptions,
  ServerOptions,
  TransportKind,
} from "vscode-languageclient/node";
import { API } from "./api";
import { ContextListItem } from "devicetree-language-server-types";

const SelectContext = async (api: API) => {
  const contexts = await api.getContexts();
  if (contexts.length === 1) {
    return contexts[0];
  }
  const options: (vscode.QuickPickItem & {
    id: string;
    ctx: ContextListItem;
  })[] = contexts.map((context) => ({
    id: context.id,
    ctx: context,
    label: `[${context.ctxNames.join(",")}]`,
    description: `dts: ${path.basename(context.mainDtsPath.file)}`,
    detail: context.overlays.length
      ? ` overlays: ${context.overlays
          .map((overlay) => path.basename(overlay.file))
          .join(", ")}`
      : "",
  }));

  return new Promise<ContextListItem | null>((resolve, reject) => {
    vscode.window
      .showQuickPick(options, {
        placeHolder: "Select devicetree context",
      })
      .then(async (selected) => {
        if (selected) {
          resolve(selected.ctx);
        }
        resolve(null);
      }, reject);
  });
};

let client: LanguageClient;
let api: API;

export async function activate(context: vscode.ExtensionContext) {
  // The server is implemented in node
  const serverModule = context.asAbsolutePath(
    path.join("server", "dist", "server.js")
  );

  // If the extension is launched in debug mode then the debug server options are used
  // Otherwise the run options are used
  const serverOptions: ServerOptions = {
    run: { module: serverModule, transport: TransportKind.ipc },
    debug: {
      module: serverModule,
      transport: TransportKind.ipc,
    },
  };

  // Options to control the language client
  const clientOptions: LanguageClientOptions = {
    // Register the server for plain text documents
    documentSelector: [{ scheme: "file", language: "devicetree" }],
    synchronize: {
      configurationSection: "devicetree",
      fileEvents: [
        vscode.workspace.createFileSystemWatcher("**/*.dts"),
        vscode.workspace.createFileSystemWatcher("**/*.dtsi"),
        vscode.workspace.createFileSystemWatcher("**/*.dtso"),
        vscode.workspace.createFileSystemWatcher("**/*.overlay"),
      ],
    },
  };

  // Create the language client and start the client.
  client = new LanguageClient(
    "devicetree",
    "devicetree",
    serverOptions,
    clientOptions
  );

  // Start the client. This will also launch the server
  await client.start();

  api = new API(client);

  context.subscriptions.push(
    vscode.workspace.registerTextDocumentContentProvider(
      "devicetree-context-output",
      {
        provideTextDocumentContent: openDeviceTreeOutputSocument,
      }
    ),
    vscode.commands.registerCommand(
      "devicetree.context.set.active",
      async () => {
        const context = await SelectContext(api);
        api.setActiveContextById(context.id);
      }
    ),
    vscode.commands.registerCommand("devicetree.context.output", async () => {
      vscode.workspace
        .openTextDocument(
          // @ignore vscode.Uri.parse
          vscode.Uri.parse(
            `devicetree-context-output:devicetree-context-${new Date()
              .toISOString()
              .replace(/[^\d]/gm, "")
              .slice(0, -3)}.dts`
          )
        )
        .then(vscode.window.showTextDocument);
    })
  );

  return api;
}

export function deactivate(): Thenable<void> | undefined {
  if (!client) {
    return undefined;
  }
  return client.stop();
}

export async function openDeviceTreeOutputSocument(): Promise<string> {
  const context = await SelectContext(api);
  const dts = await api.compiledOutput(context.id);
  const message = `/* This content was automatically generated by the dts-lsp language server.
It is not equivalent to the output produced by a DTS compiler and should only
be used as a reference to understand what the final compiled output might look like. */.
${dts}
`;
  return message;
}
